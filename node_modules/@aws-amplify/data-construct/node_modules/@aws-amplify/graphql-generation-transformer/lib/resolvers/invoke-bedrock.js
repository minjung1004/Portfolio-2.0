"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInvokeBedrockResolverFunction = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const createInvokeBedrockResolverFunction = (config) => {
    const { aiModel, toolConfig, inferenceConfiguration, field } = config;
    const AI_MODEL = aiModel;
    const TOOL_CONFIG = JSON.stringify(toolConfig);
    const SYSTEM_PROMPT = JSON.stringify(config.systemPrompt);
    const INFERENCE_CONFIG = getInferenceConfigResolverDefinition(inferenceConfiguration);
    const resolver = generateResolver('invoke-bedrock-resolver-fn.template.js', {
        AI_MODEL,
        TOOL_CONFIG,
        SYSTEM_PROMPT,
        INFERENCE_CONFIG,
    });
    const templateName = `${field.name.value}-invoke-bedrock-fn`;
    return graphql_transformer_core_1.MappingTemplate.s3MappingFunctionCodeFromString(resolver, templateName);
};
exports.createInvokeBedrockResolverFunction = createInvokeBedrockResolverFunction;
const generateResolver = (fileName, values) => {
    let resolver = fs_1.default.readFileSync(path_1.default.join(__dirname, fileName), 'utf8');
    Object.entries(values).forEach(([key, value]) => {
        const replaced = resolver.replace(new RegExp(`\\[\\[${key}\\]\\]`, 'g'), value);
        resolver = replaced;
    });
    return resolver;
};
const getInferenceConfigResolverDefinition = (inferenceConfiguration) => {
    return inferenceConfiguration && Object.keys(inferenceConfiguration).length > 0
        ? `{ inferenceConfig: ${JSON.stringify(inferenceConfiguration)} },`
        : 'undefined';
};
//# sourceMappingURL=invoke-bedrock.js.map